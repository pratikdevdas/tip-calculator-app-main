$primary-color: hsl(172, 67%, 45%);
$primary-white: hsl(0, 0%, 100%);
$breakpoints: (
  'medium': (min-width: 800px),
  'large': (min-width: 1000px),
  'huge': (min-width: 1200px),
);

// mixins

@mixin respond-to($breakpoint){
    $value:map-get($breakpoints, $breakpoint);

    @if $value {
        $query: if(
          type-of($value) == 'string'
        );
    
        @media #{$query} {
          @content;
        }
      } @else {
        @error 'No value found for `#{$breakpoint}`. '
             + 'Please make sure it is defined in `$breakpoints` map.';
      }
    }

@include respond-to(huge){
    body{
        background-color: red;
    }
}

@mixin boxes {
    border: 2px solid red;
    box-sizing: border-box;
    width: 50%;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
}

body, html, main {
  background-color: green;
  height: 100%;
}

main {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;

  & > div {
    display: flex;
    border: 3px solid $primary-white;
    min-width: 70%;
    height: 500px;
    border-radius: 30px;
    background-color: $primary-white;
  }
}

div{
    input{
        width: 90%;
        line-height: 2.5rem;
    }
}

.left--box{
   @include boxes;
    padding-left: 3rem;
    // align-items: center;
}

.left--box__buttons{
    display: grid;
    width: 90%;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: repeat(2,3rem);
    gap: 15px;
}

.right--box{
    @include boxes;
    padding-left: 3rem;
    & div {
        display: flex;
        justify-content: center;
        width: 90%;

        & button{
            height: 3rem;
            width: 90%;
        }
    }
}
